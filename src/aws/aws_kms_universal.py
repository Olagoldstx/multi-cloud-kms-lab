#!/usr/bin/env python3
import base64
import sys

print("🔐 AWS KMS UNIVERSAL DEMO")
print("=" * 40)

def check_boto3():
    """Check if boto3 is available"""
    try:
        import boto3
        return boto3
    except ImportError:
        print("❌ boto3 not available")
        print("💡 Try these solutions:")
        print("   1. Activate virtual environment: source kms-env/bin/activate")
        print("   2. Install in venv: pip3 install boto3")
        print("   3. Use system package: sudo apt install python3-boto3")
        return None

def demonstrate_aws_concepts():
    """Demonstrate AWS KMS concepts regardless of installation"""
    print("\n🎓 AWS KMS CORE CONCEPTS")
    print("=" * 30)
    
    print("1. 🔑 KEY MANAGEMENT")
    print("   • Customer Master Keys (CMK)")
    print("   • Automatic key rotation")
    print("   • Key policies and IAM integration")
    
    print("\n2. 🔐 ENCRYPTION WORKFLOW")
    print("   • Direct encryption for small data (<4KB)")
    print("   • Envelope encryption for large data")
    print("   • Data keys generated by KMS")
    
    print("\n3. 🌐 INTEGRATION PATTERNS")
    print("   • AWS Services: S3, EBS, RDS auto-encryption")
    print("   • Cross-account access")
    print("   • Multi-region replication")
    
    print("\n4. 📊 SECURITY & COMPLIANCE")
    print("   • Hardware Security Modules (HSM)")
    print("   • CloudTrail logging for all operations")
    print("   • Compliance certifications (SOC, PCI, HIPAA)")

def simulate_aws_workflow():
    """Simulate the AWS KMS workflow"""
    print("\n🔄 SIMULATED AWS KMS WORKFLOW")
    print("=" * 30)
    
    # Simulate key creation
    key_id = "simulated-kms-key-12345"
    print(f"1. ✅ Key Created: {key_id}")
    
    # Simulate encryption
    plaintext = "Sensitive data for AWS KMS"
    print(f"2. 📝 Plaintext: {plaintext}")
    
    # Simple simulation of encryption
    simulated_cipher = base64.b64encode(f"AWSKMS:{key_id}:{plaintext}".encode()).decode()
    print(f"3. 🔒 Encrypted: {simulated_cipher[:50]}...")
    
    # Simulate decryption
    decoded = base64.b64decode(simulated_cipher).decode()
    if decoded.startswith('AWSKMS:'):
        parts = decoded.split(':')
        decrypted_key = parts[1]
        decrypted_text = ':'.join(parts[2:])
        print(f"4. 🔓 Decrypted with key {decrypted_key}: {decrypted_text}")
    
    # Verify
    if plaintext == decrypted_text:
        print("5. ✅ Verification: Encryption/decryption successful!")

def real_aws_demo():
    """Run real AWS KMS demo if boto3 is available"""
    boto3 = check_boto3()
    if not boto3:
        return False
    
    try:
        print("\n🚀 ATTEMPTING REAL AWS KMS SETUP")
        print("-" * 30)
        
        # Initialize AWS KMS client
        kms_client = boto3.client('kms', region_name='us-east-1')
        print("✅ AWS KMS client initialized")
        
        # Create a KMS key
        response = kms_client.create_key(
            Description='Multi-Cloud KMS Lab Key',
            KeyUsage='ENCRYPT_DECRYPT'
        )
        key_id = response['KeyMetadata']['KeyId']
        print(f"✅ AWS KMS Key Created: {key_id}")
        
        # Encrypt data
        plaintext = "Secret data for real AWS KMS"
        encrypt_response = kms_client.encrypt(
            KeyId=key_id,
            Plaintext=plaintext.encode()
        )
        ciphertext = base64.b64encode(encrypt_response['CiphertextBlob']).decode()
        print(f"🔒 Real encryption: {ciphertext[:50]}...")
        
        # Decrypt data
        decrypt_response = kms_client.decrypt(
            CiphertextBlob=base64.b64decode(ciphertext)
        )
        decrypted = decrypt_response['Plaintext'].decode()
        print(f"🔓 Real decryption: {decrypted}")
        
        if plaintext == decrypted:
            print("🎉 REAL AWS KMS SUCCESSFUL!")
        
        return True
        
    except Exception as e:
        print(f"❌ Real AWS KMS failed: {e}")
        print("💡 Check AWS credentials: aws configure")
        return False

if __name__ == "__main__":
    # First demonstrate concepts
    demonstrate_aws_concepts()
    
    # Try real AWS KMS
    real_success = real_aws_demo()
    
    # If real AWS failed, show simulation
    if not real_success:
        simulate_aws_workflow()
    
    print("\n" + "=" * 50)
    print("🎓 AWS KMS LEARNING COMPLETE!")
    print("=" * 50)
    print("You now understand:")
    print("✓ AWS KMS architecture and concepts")
    print("✓ Key management workflows")
    print("✓ Encryption patterns and best practices")
    print("✓ Multi-cloud security strategies")
    
    if not real_success:
        print("\n💡 To use real AWS KMS:")
        print("   1. Ensure you're in virtual environment: source kms-env/bin/activate")
        print("   2. Install boto3: pip3 install boto3")
        print("   3. Configure AWS: aws configure")
        print("   4. Run this script again")
